const session = require("express-session");
const passport = require("passport");

global.db = require('../config/mongo.js');
var app = require('../app');
var debug = require('debug')('jobsity-test:server');
var http = require('http');

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

var server = http.createServer(app);

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    return val;
  }

  if (port >= 0) {
    return port;
  }

  return false;
}

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string' ?
    'Pipe ' + port :
    'Port ' + port;

  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

var io = require('socket.io')(server);

const wrap = middleware => (socket, next) => middleware(socket.request, {}, next);
io.use(wrap(session({ secret: "jobsity-test" })));
io.use(wrap(passport.initialize()));
io.use(wrap(passport.session()));

app.set('socketIo', io);

io.on('connection', function(socket) {

  socket.on('whoami', (cb) => {
    cb(socket.request.user ? socket.request.user.username : '');
  });

  console.log('someone connected');
  socket.on('chat message', function(user, msg) {
    console.log(Date.now().toString() + user + ' says: ' + msg);
    const msgDate = new Date();
    const composeMessage = msgDate.toISOString().replace(/T/, ' ').replace(/\..+/, '') + ' ' + user + ' says: ' + msg;
    global.db.saveMessage(msgDate, user, msg, composeMessage);
    io.emit('chat message', composeMessage);
  });

  socket.on('disconnect', function() {
    console.log('user disconnected');
  });
});

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string' ?
    'pipe ' + addr :
    'port ' + addr.port;
  debug('Listening on ' + bind);
}